const TheoryofComputationTOC2 = [
  {
    question: "Given a Turing machine M that accepts a language L, what does the complement of L look like?",
    options: ["The same Turing machine but with the states flipped", "Another Turing machine that accepts all strings not accepted by M", "A different Turing machine with the same number of states", "The language L itself"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What is the computational power of a Turing machine with an oracle that decides the halting problem?",
    options: ["Same as a standard Turing machine", "Equivalent to a Turing machine with a counter", "Equivalent to a Universal Turing Machine", "Unbounded computational power"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "Which concept from formal language theory describes the capability of a grammar to generate all possible valid strings in a given language?",
    options: ["Closure", "Complementation", "Generativity", "Decidability"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "How many possible configurations can a Turing Machine with n states and a blank symbol have on a tape of k cells?",
    options: ["n*k", "n^k", "k^n", "n*2^k"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "The Chomsky Hierarchy classifies formal grammars based on...",
    options: ["The type of symbols used", "The computational power of the generated language", "The number of non-terminals in the grammar", "The complexity of the parsing algorithm"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What is the typical role of a pushdown automaton (PDA) in practical applications?",
    options: ["Executing complex arithmetic calculations", "Parsing context-free grammars", "Searching large databases", "Compiling high-level languages"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "The problem of determining if two Turing machines recognize the same language is:",
    options: ["Decidable", "Undecidable", "Partially decidable", "Turing recognizable"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What does it mean for a language to be recursively enumerable?",
    options: ["There exists a Turing Machine that accepts all inputs", "There exists a Turing Machine that can enumerate all the strings in the language", "There exists a Turing Machine that can decide if a string is in the language", "It has a finite number of strings"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "In context-free grammar, what does a non-terminal represent?",
    options: ["A terminal symbol in the language", "A syntactic category or phrase type", "A regular expression", "A recursively defined function"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What is a key difference between a Turing machine and a finite automaton?",
    options: ["Tape size", "Number of states", "Computational power", "Alphabet size"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "What is a key practical use of formal language theory?",
    options: ["Designing faster computers", "Creating more efficient databases", "Developing compilers and interpreters", "Optimizing operating system code"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "The set of all strings of a given length that can be generated by a context-free grammar is...",
    options: ["Regular", "Context-free", "Recursively enumerable", "Decidable"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "What algorithm, fundamental to TOC, is used to determine if a Turing machine halts on a given input?",
    options: ["Floyd-Warshall", "Knuth-Morris-Pratt", "Prim's Algorithm", "Halting problem"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "Which is true for Context-Free grammars?",
    options: ["They can describe all possible languages", "They are a subset of Turing machines", "Every CFL can be decided by a PDA", "Can accept all recursively enumerable languages"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "What's the relationship between the Chomsky hierarchy and Turing machines?",
    options: ["Turing Machines are a subset of the Chomsky Hierarchy", "Chomsky Hierarchy defines various subclasses of Turing machines", "Turing machines are the base and Chomsky hierarchy classifies different subclasses", "The Chomsky hierarchy is a tool for designing Turing machines"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "Which problem is related to non-deterministic Turing machines?",
    options: ["Context-sensitive parsing", "Minimization of Turing machines", "Halting problem", "Pumping lemma"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "A language that is both recursively enumerable and co-recursively enumerable is...",
    options: ["Recursively inseparable", "Recursively decidable", "Recursively undecidable", "Recursively enumerable and not co-recursively enumerable"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What problem can a Turing Machine solve if it has access to a halting oracle?",
    options: ["The halting problem", "The emptiness problem", "The membership problem", "The equivalence problem"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "A language that is regular is also...",
    options: ["Context-free", "Context-sensitive", "Recursively enumerable", "Recursively decidable"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "Consider a Turing machine that operates on binary strings.  If the machine halts on input 1011, what can be definitively concluded about its behavior on input 1101?",
    options: ["The machine will halt on 1101", "The machine will loop infinitely on 1101", "The machine will accept 1101", "The halting behavior is indeterminate without knowing the transition function"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "Which of these formal languages is not context-free?",
    options: ["L = {a^n b^n c^n | n >= 0}", "L = {a^n b^n | n >= 0}", "L = {ww^R | w \u2208 {a,b}* }", "L = {a^i b^j c^k | i = j or j = k}"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "A nondeterministic Turing machine accepts an input string if...",
    options: ["There exists at least one accepting path", "Every possible path accepts", "There is only one accepting path", "Every path leads to a rejecting state"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "What is the Chomsky Hierarchy's relationship to the computational power of automata?",
    options: ["Higher levels have lesser power", "Higher levels have greater power", "All levels have equal power", "The hierarchy is unrelated to automaton power"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "Which concept is fundamental to proving undecidability?",
    options: ["Regular languages", "Context-free grammars", "Reducibility", "Finite automata"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "A Turing machine can decide the problem of...",
    options: ["finding the largest number in a list", "determining if a given program halts on a particular input", "compiling a programming language", "checking the validity of mathematical proofs"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "Which property is NOT guaranteed for a decidable language?",
    options: ["Finite Automaton Recognizable", "Turing Machine Decidable", "Recursive Enumerable", "Regular Language"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "A grammar with a single non-terminal that produces strings of alternating 'a' and 'b', where the number of 'a' and 'b' are always equal, is a...",
    options: ["Regular grammar", "Context-free grammar", "Context-sensitive grammar", "Recursively enumerable grammar"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "Given a Turing Machine M and an input string w, how can we determine if M accepts w?",
    options: ["Simulation until M halts and enters an accepting state", "Analyzing the grammar that generates w", "By manually tracing the transition function", "Running M on a different input"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "The key difference between a pushdown automaton and a Turing machine is...",
    options: ["memory capacity", "type of input tape", "ability to backtrack", "computational model"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "What is the computational complexity of determining whether a given context-free grammar is ambiguous?",
    options: ["Polynomial", "Linear", "Decidable but not in polynomial time", "Undecidable"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "Which language family is closed under concatenation?",
    options: ["Regular languages", "Context-free languages", "Recursive languages", "All of the above"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "Which operation transforms a deterministic finite automaton (DFA) into an equivalent NFA?",
    options: ["Epsilon closure", "Subset construction", "Complement", "Determinization"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "The halting problem is undecidable, implying there's no algorithm to...",
    options: ["find the largest prime number", "determine if a program will halt on a given input", "sort a list of numbers", "calculate the factorial of a number"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What does the pumping lemma for context-free languages demonstrate?",
    options: ["All context-free languages are regular", "Regular languages are infinite", "All context-free languages have a finite description", "Context-free languages have a repeating structure"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "A real-world application of formal language theory could be in...",
    options: ["Compiler design", "Image recognition", "Speech synthesis", "All of the above"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "Which property does every recursive language possess?",
    options: ["Decidability", "Regularity", "Context-freeness", "Recursive enumerability"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "What does a reduction in the context of computability theory show?",
    options: ["A problem's solution", "A problem's difficulty", "A problem's undecidability", "An equivalent problem"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "How many distinct halting states can a Turing machine have?",
    options: ["One", "Two", "Arbitrary", "Zero"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "Which automata model is most powerful in terms of language recognition?",
    options: ["Finite Automaton", "Pushdown Automaton", "Turing Machine", "Deterministic Finite Automaton"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "What is a key difference between a context-free grammar and a context-sensitive grammar?",
    options: ["Context-sensitive grammars can contain 'if' and 'while' statements", "Context-sensitive grammars are used in compiler design and can handle variable scoping", "Context-sensitive grammars involve relationships between parts of a string", "Context-free grammars always use recursion"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "Which problem is typically used as a representative undecidable problem?",
    options: ["Sorting a list of numbers", "Checking if a grammar is ambiguous", "Finding the longest common substring of two strings", "The halting problem"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "What does it mean for a problem to be 'semi-decidable'?",
    options: ["It can be decided if the answer is 'yes' but not if it is 'no'", "It can be decided with certainty if the input is in the language", "It can be decided if the answer is 'no' but not if it is 'yes'", "It can be decided in polynomial time"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "What is a key characteristic of a context-sensitive grammar?",
    options: ["The derivation rules can be applied to any part of the string", "The rules have no constraints on the context around the production", "The grammar rules must depend on the adjacent symbols", "The grammar rules only use a single non-terminal"],
    correct: 2,
    category: "TOC"
  },
  {
    question: "Consider a Turing Machine that accepts strings where the number of 'a's is a multiple of 3.  Which of the following represents a critical characteristic of the design required for this Turing Machine?",
    options: ["A state-transition function that explicitly tracks the count modulo 3", "A separate tape for storing the input length", "A halting state to signal acceptance once the input is fully read", "A non-deterministic approach to account for possible variations in input order"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "Given a context-free grammar with productions S → aSb | ε, which of the following strings is in the language generated by this grammar?",
    options: ["aababb", "abbab", "aaabbb", "aaaa"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "Which of the following formal language properties is relevant to establishing the undecidability of the halting problem?",
    options: ["Closure under intersection", "Closure under union", "Decidability of emptiness", "Decidability of finiteness"],
    correct: 3,
    category: "TOC"
  },
  {
    question: "A compiler for a programming language needs to validate that variable declarations match usage.  Which of the following theoretical concepts forms the basis for this validation?",
    options: ["Finite Automata", "Context-Free Grammars", "Regular Expressions", "Turing Machines"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "What is a crucial difference between a deterministic finite automaton (DFA) and a non-deterministic finite automaton (NFA)?",
    options: ["DFA can accept languages that NFA cannot", "NFA can accept languages that DFA cannot", "NFA can process input characters in parallel", "DFA has more memory capacity"],
    correct: 1,
    category: "TOC"
  },
  {
    question: "In the Chomsky hierarchy, which type of grammar allows for the most complex language constructions?",
    options: ["Type 0", "Type 1", "Type 2", "Type 3"],
    correct: 0,
    category: "TOC"
  },
  {
    question: "What is the computational power of a Turing machine equipped with a single tape and a read-only input head and a write-only output head?",
    options: ["Equivalent to a standard Turing machine", "Fewer powerful than a standard Turing machine", "More powerful than a standard Turing machine", "Not defined"],
    correct: 0,
    category: "TOC"
  }
];

export default TheoryofComputationTOC2;
